{"version":3,"sources":["contacts.js"],"names":["BASE_URL","ulRef","document","querySelector","formRef","init","renderContacts","reqServer","addEventListener","onCreateData","deleteCard","url","method","data","options","headers","body","JSON","stringify","res","fetch","json","createMarkup","name","lname","email","phone","age","id","contacts","innerHTML","map","join","e","preventDefault","currentTarget","elements","obj","value","outerHTML","insertAdjacentHTML","target","tagName","liRef","closest","Number","dataset","action","remove","Object","entries","forEach","key"],"mappings":";AAAA,MAAMA,EAAW,iCAEXC,EAAQC,SAASC,cAAc,aAC/BC,EAAUF,SAASC,cAAc,QAEvC,eAAeE,IAEbC,QAAqBC,KAErBH,EAAQI,iBAAiB,SAAUC,GACnCR,EAAMO,iBAAiB,QAASE,GAGlC,MAAMH,EAAY,MAAOI,EAAM,IAAKC,EAAS,MAAOC,EAAO,MACnDC,MAAAA,EAAU,CACdF,OAAAA,EACAG,QAAS,CACS,eAAA,oCAGL,QAAXH,GAAoBC,IAAMC,EAAQE,KAAOC,KAAKC,UAAUL,IACtDM,MAAAA,QAAYC,MAAMpB,EAAWW,EAAKG,GACjCK,OAAAA,EAAIE,KAAKF,IAGZG,EAAe,EAAGC,KAAAA,EAAMC,MAAAA,EAAOC,MAAAA,EAAOC,MAAAA,EAAOC,IAAAA,EAAKC,GAAAA,qBAC/BA,sBACVL,4BACKC,wBACJC,wBACAC,sBACFC,kJAORrB,EAAiBuB,IACrB5B,EAAM6B,UAAYD,EAASE,IAAIT,GAAcU,KAAK,KAGpD,eAAevB,EAAawB,GAC1BA,EAAEC,iBACI,MAAA,KAAEX,EAAF,MAAQC,EAAR,MAAeC,EAAf,MAAsBC,EAAtB,IAA6BC,GAAQM,EAAEE,cAAcC,SAErDC,EAAM,CACVd,KAAMA,EAAKe,MACXd,MAAOA,EAAMc,MACbb,MAAOA,EAAMa,MACbZ,MAAOA,EAAMY,MACbX,IAAKA,EAAIW,OAGP,GAAClC,EAAQgC,SAASR,GAAGU,MAGlB,CACCzB,MAAAA,QAAaN,MAAcH,EAAQgC,SAASR,GAAGU,QAAS,QAASD,GACvEpC,EAAME,2BAA2BU,EAAKe,QAAQW,UAAYjB,EAAaT,OALzC,CACxBA,MAAAA,QAAaN,EAAU,IAAK,OAAQ8B,GAC1CpC,EAAMuC,mBAAmB,YAAalB,EAAaT,KAWvD,eAAeH,EAAWuB,GACpBA,GAAqB,WAArBA,EAAEQ,OAAOC,QAAsB,OAC7BC,MAAAA,EAAQV,EAAEQ,OAAOG,QAAQ,MACzBhB,EAAKiB,OAAOF,EAAMG,QAAQlB,IAE5BK,GAA4B,QAA5BA,EAAEQ,OAAOK,QAAQC,aACbxC,MAAcqB,IAAM,UAE1Be,EAAMK,cACD,GAAgC,SAA5Bf,EAAEQ,OAAOK,QAAQC,OAAmB,CACvClC,MAAAA,QAAaN,MAAcqB,KACjCqB,OAAOC,QAAQrC,GAAMsC,QAAQ,EAAEC,EAAKd,MAClClC,EAAQgC,SAASgB,GAAKd,MAAQA,KAKpCjC","file":"contacts.dd4a60ba.js","sourceRoot":"../src","sourcesContent":["const BASE_URL = 'http://localhost:3000/contacts';\n\nconst ulRef = document.querySelector('#contacts');\nconst formRef = document.querySelector('form');\n\nasync function init() {\n  // const res = (await reqServer());\n  renderContacts(await reqServer());\n\n  formRef.addEventListener('submit', onCreateData);\n  ulRef.addEventListener('click', deleteCard);\n}\n\nconst reqServer = async (url = '/', method = 'GET', data = {}) => {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  };\n  if (method !== 'GET' && data) options.body = JSON.stringify(data);\n  const res = await fetch(BASE_URL + url, options);\n  return res.json(res);\n};\n\nconst createMarkup = ({ name, lname, email, phone, age, id }) => {\n  return `<li data-id=\"${id}\"> \n    <p>Name: ${name}</p>\n    <p>Last name: ${lname}</p>\n    <p>Email: ${email}</p>\n    <p>Phone: ${phone}</p>\n    <p>Age: ${age}</p>\n    <button type=\"button\" data-action='edit'>Edit</button>\n    <button type=\"button\" data-action='del'>Delete</button>\n    </li>\n    `;\n};\n\nconst renderContacts = contacts => {\n  ulRef.innerHTML = contacts.map(createMarkup).join('');\n};\n\nasync function onCreateData(e) {\n  e.preventDefault();\n  const { name, lname, email, phone, age } = e.currentTarget.elements;\n\n  const obj = {\n    name: name.value,\n    lname: lname.value,\n    email: email.value,\n    phone: phone.value,\n    age: age.value,\n  };\n\n  if (!formRef.elements.id.value) {\n    const data = await reqServer('/', 'POST', obj);\n    ulRef.insertAdjacentHTML('beforeend', createMarkup(data));\n  } else {\n    const data = await reqServer(`/${formRef.elements.id.value}`, 'PATCH', obj);\n    ulRef.querySelector(`[data-id=\"${data.id}\"]`).outerHTML = createMarkup(data);\n  }\n\n  // reqServer('/', 'POST', obj).then(data => {\n  //   ulRef.insertAdjacentHTML('beforeend', createMarkup(data));\n  // });\n}\n\nasync function deleteCard(e) {\n  if (e.target.tagName !== 'BUTTON') return;\n  const liRef = e.target.closest('li');\n  const id = Number(liRef.dataset.id);\n\n  if (e.target.dataset.action === 'del') {\n    await reqServer(`/${id}`, 'DELETE');\n\n    liRef.remove();\n  } else if (e.target.dataset.action === 'edit') {\n    const data = await reqServer(`/${id}`);\n    Object.entries(data).forEach(([key, value]) => {\n      formRef.elements[key].value = value;\n    });\n  }\n}\n\ninit();\n\n//на каждый контакт добавить кнопку, по нажатию авто зап формы и по сабмиту происходит обновление, без перезагрузки и перерендериваем\n"]}